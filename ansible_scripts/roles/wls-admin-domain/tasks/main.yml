---
- include_vars: vars.yaml
  tags: createAdminDomain,cleanupAdminDomain

- include_role:
    name: wls-admin-domain
    tasks_from: cleanup_domain
  tags: createAdminDomain,cleanupAdminDomain

- name: create script directory 
  file:
    path: "{{ script_dir }}"
    state: directory
  become: true
  become_user: "{{ oracle_user }}"
  tags: createAdminDomain

- name: create domain directory 
  file:
    path: "{{ domain_dir }}"
    state: directory
  become: true
  become_user: "{{ oracle_user }}"
  tags: createAdminDomain

- name: copy create domain python script
  template: src=createAdminDomain.py dest={{ script_dir }} owner={{ oracle_user }} group={{ oracle_group }}
  become: true
  become_user: "{{ oracle_user }}"
  tags: createAdminDomain

- name: create Weblogic Admin Domain
  register: domainsetup
  shell: "{{ weblogic_home }}/common/bin/wlst.sh {{ script_dir }}/createAdminDomain.py"
  args:
    chdir: "{{ domain_dir }}"  
  become: true
  become_user: "{{ oracle_user }}" 
  tags: createAdminDomain

- name: Create security folder on Admin Server
  file: state=directory path={{ domain_home }}/{{ domain_name }}/servers/{{ admin_server_name }}/security owner={{ oracle_user }} group={{ oracle_group }}  
  become: true
  become_user: "{{ oracle_user }}"
  tags: createAdminDomain

- name: copy boot.properties file
  template: src=boot.properties dest={{ domain_home }}/{{ domain_name }}/servers/{{ admin_server_name }}/security/ owner={{ oracle_user }} group={{ oracle_group }}
  become: true
  become_user: "{{ oracle_user }}"
  tags: createAdminDomain

- name: modify boot.properties file
  replace:
    path: "{{ domain_home }}/{{ domain_name }}/servers/{{ admin_server_name }}/security/boot.properties"
    regexp: '^.*username=.*$'
    replace: 'username={{ admin_user }}'
  become: true
  tags: createAdminDomain

- name: modify boot.properties file
  replace:
    path: "{{ domain_home }}/{{ domain_name }}/servers/{{ admin_server_name }}/security/boot.properties"
    regexp: '^.*password=.*$'
    replace: 'password={{ admin_password }}'
  become: true
  tags: createAdminDomain

- include_role:
    name: wls-nodemanager

- name: Copy admin server systemd script
  template: src=wls_admin.service dest=/etc/systemd/system/ mode=0664
  tags: createAdminDomain

- name: Enable admin service as linux service
  command: 'systemctl enable wls_admin'
  tags: createAdminDomain

- name: Start Admin Server
  command: 'systemctl start wls_admin'
  tags: createAdminDomain

- name: "wait for Admin Server to startup"
  uri:
    url: "http://{{ admin_host }}:{{ admin_port }}/weblogic/ready"
    method: GET    
  register: _result
  until: _result.status == 200
  retries: 20
  delay: 5
  tags: createAdminDomain

- name: unblock admin port
  shell: sudo firewall-cmd --zone=public --add-port={{ admin_port }}/tcp
  args:
    executable: /bin/bash
  become: true
  tags: createAdminDomain

- name: unblock admin ssl port
  shell: sudo firewall-cmd --zone=public --add-port={{ admin_ssl_port }}/tcp
  args:
    executable: /bin/bash
  become: true
  tags: createAdminDomain

