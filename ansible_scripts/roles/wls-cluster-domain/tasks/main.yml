---
- include_vars: vars.yaml
  tags: createClusterDomain,cleanupClusterDomain

- include_role:
    name: wls-cluster-domain
    tasks_from: cleanup_domain
  tags: createClusterDomain,cleanupClusterDomain

- name: create script directory
  file:
    path: "{{ script_dir }}"
    state: directory
  become: true
  become_user: "{{ oracle_user }}"
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: create domain directory
  file:
    path: "{{ domain_dir }}"
    state: directory
  become: true
  become_user: "{{ oracle_user }}"
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: copy create domain python script
  template: src=createClusterDomain.py dest={{ script_dir }} owner={{ oracle_user }} group={{ oracle_group }}
  become: true
  become_user: "{{ oracle_user }}"
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain


- name: create Weblogic Cluster Domain
  register: "domainsetup"
  shell: "{{ weblogic_home }}/common/bin/wlst.sh {{ script_dir }}/createClusterDomain.py"
  args:
    chdir: "{{ domain_dir }}"
  become: true
  become_user: "{{ oracle_user }}"
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: Create security folder on Admin Server
  file: state=directory path={{ domain_home }}/{{ domain_name }}/servers/{{ admin_server_name }}/security owner={{ oracle_user }} group={{ oracle_group }}
  become: true
  become_user: "{{ oracle_user }}"
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: copy boot.properties file
  template: src=boot.properties dest={{ domain_home }}/{{ domain_name }}/servers/{{ admin_server_name }}/security/ owner={{ oracle_user }} group={{ oracle_group }}
  become: true
  become_user: "{{ oracle_user }}"
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: modify boot.properties file
  replace:
    path: "{{ domain_home }}/{{ domain_name }}/servers/{{ admin_server_name }}/security/boot.properties"
    regexp: '^.*username=.*$'
    replace: 'username={{ admin_user }}'
  become: true
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: modify boot.properties file
  replace:
    path: "{{ domain_home }}/{{ domain_name }}/servers/{{ admin_server_name }}/security/boot.properties"
    regexp: '^.*password=.*$'
    replace: 'password={{ admin_password }}'
  become: true
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: Copy admin server systemd script
  template: src=wls_admin.service dest=/etc/systemd/system/ mode=0664
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: Enable admin service as linux service
  command: 'systemctl enable wls_admin'
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: Start Admin Server
  command: 'systemctl start wls_admin'
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: "wait for Admin Server to startup"
  uri:
    url: "http://{{ admin_host }}:{{ admin_port }}/weblogic/ready"
    method: GET
  register: _result
  until: _result.status == 200
  retries: 20
  delay: 5
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: unblock admin port
  shell: sudo firewall-cmd --zone=public --add-port={{ admin_port }}/tcp
  args:
    executable: /bin/bash
  become: true
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: unblock admin ssl port
  shell: sudo firewall-cmd --zone=public --add-port={{ admin_ssl_port }}/tcp
  args:
    executable: /bin/bash
  become: true
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: Stop admin server process
  shell: "systemctl stop wls_admin.service || true"
  become: true
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: delete domain.jar, if already exists
  file:
    path: "{{ domain_pack_jar }}"
    state: absent
  become: true
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: pack domain
  shell: "{{ middleware_common_home }}/common/bin/pack.sh -domain {{ domain_dir }} -template {{ domain_pack_jar }} -template_name {{ domain_name }} -managed true"
  become: true
  become_user: "{{ oracle_user }}"
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: fetch packed domain jar to local
  fetch:
    src: "{{ domain_pack_jar }}"
    dest: "{{ role_path }}/files/"
    flat: true
  become: true
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: copy packed domain jar to managed server vms
  copy:
    src: "{{ domain_jar }}"
    dest: "{{ base_dir }}"
  become: true
  become_user: "{{ oracle_user }}"
  when: inventory_hostname not in groups['admin_vm']
  tags: createClusterDomain

- name: unpack domain on managed server vms
  shell: "{{ middleware_common_home }}/common/bin/unpack.sh -domain {{ domain_dir }} -template {{ domain_pack_jar }}"
  become: true
  become_user: "{{ oracle_user }}"
  when: inventory_hostname not in groups['admin_vm']
  tags: createClusterDomain

- include_role:
    name: wls-nodemanager

- name: start admin server
  command: 'systemctl start wls_admin'
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: wait for Admin Server to startup
  uri:
    url: "http://{{ admin_host }}:{{ admin_port }}/weblogic/ready"
    method: GET
  register: _result
  until: _result.status == 200
  retries: 20
  delay: 5
  tags: createClusterDomain

- name: copy start cluster python script
  template: src=startCluster.py dest={{ script_dir }} owner={{ oracle_user }} group={{ oracle_group }}
  become: true
  become_user: "{{ oracle_user }}"
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: start managed servers
  register: "startcluster"
  shell: "{{ weblogic_home }}/common/bin/wlst.sh {{ script_dir }}/startCluster.py"
  args:
    chdir: "{{ domain_dir }}"
  become: true
  become_user: "{{ oracle_user }}"
  when: inventory_hostname in groups['admin_vm']
  tags: createClusterDomain

- name: unblock managed server port1
  shell: sudo firewall-cmd --zone=public --add-port={{ ms_port1 }}/tcp
  args:
    executable: /bin/bash
  become: true
  tags: createClusterDomain

- name: unblock managed server port2
  shell: sudo firewall-cmd --zone=public --add-port={{ ms_port2 }}/tcp
  args:
    executable: /bin/bash
  become: true
  tags: createClusterDomain

- name: verify if managed servers are running on port {{ ms_port1 }}
  uri:
    url: "http://{{ ansible_fqdn }}:{{ ms_port1 }}/weblogic/ready"
    method: GET
  register: _result
  until: _result.status == 200
  retries: 20
  delay: 5
  tags: createClusterDomain

- name: verify if managed servers are running on port {{ ms_port2 }}
  uri:
    url: "http://{{ ansible_fqdn }}:{{ ms_port2 }}/weblogic/ready"
    method: GET
  register: _result
  until: _result.status == 200
  retries: 20
  delay: 5
  when: inventory_hostname not in groups['admin_vm']
  tags: createClusterDomain
